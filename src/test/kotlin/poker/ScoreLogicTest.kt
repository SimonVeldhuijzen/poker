/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package poker

import poker.players.TestingPlayer
import kotlin.math.max
import kotlin.test.Test
import kotlin.test.assertEquals

class ScoreLogicTest {
    @Test
    fun straightFlush() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(5)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(4)),
            Card(CardSuit.CLUBS, CardRank(8)),
            Card(CardSuit.CLUBS, CardRank(10)),
            Card(CardSuit.CLUBS, CardRank(10))
        )

        val result = rankHand(hand)

        assertEquals(StraightFlush::class, result::class)
        assertEquals(8, result.deciders[0])
    }

    @Test
    fun straightFlushWithLowAce() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(14)),
            Card(CardSuit.CLUBS, CardRank(5)),
            Card(CardSuit.CLUBS, CardRank(4)),
            Card(CardSuit.CLUBS, CardRank(3)),
            Card(CardSuit.CLUBS, CardRank(2)),
            Card(CardSuit.SPADES, CardRank(3)),
            Card(CardSuit.SPADES, CardRank(2))
        )

        val result = rankHand(hand)

        assertEquals(StraightFlush::class, result::class)
        assertEquals(5, result.deciders[0])
    }

    @Test
    fun fourOfAKind() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(FourOfAKind::class, result::class)
        assertEquals(7, result.deciders[0])
        assertEquals(6, result.deciders[1])
    }

    @Test
    fun weirdTwo() {
        val hand = listOf(
                Card(CardSuit.CLUBS, CardRank(13)),
                Card(CardSuit.HEARTS, CardRank(13)),
                Card(CardSuit.DIAMONDS, CardRank(12)),
                Card(CardSuit.SPADES, CardRank(12)),
                Card(CardSuit.CLUBS, CardRank(14)),
                Card(CardSuit.HEARTS, CardRank(11)),
                Card(CardSuit.DIAMONDS, CardRank(11))
        )

        val result = rankHand(hand)

        assertEquals(TwoPair::class, result::class)
        assertEquals(13, result.deciders[0])
        assertEquals(12, result.deciders[1])
        assertEquals(14, result.deciders[2])
    }

    @Test
    fun weirdFour() {
        val hand = listOf(
                Card(CardSuit.CLUBS, CardRank(13)),
                Card(CardSuit.HEARTS, CardRank(13)),
                Card(CardSuit.DIAMONDS, CardRank(13)),
                Card(CardSuit.SPADES, CardRank(13)),
                Card(CardSuit.CLUBS, CardRank(14)),
                Card(CardSuit.HEARTS, CardRank(11)),
                Card(CardSuit.DIAMONDS, CardRank(11))
        )

        val result = rankHand(hand)

        assertEquals(FourOfAKind::class, result::class)
        assertEquals(13, result.deciders[0])
        assertEquals(14, result.deciders[1])
    }

    @Test
    fun fullHouse() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(3)),
            Card(CardSuit.CLUBS, CardRank(4)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(FullHouse::class, result::class)
        assertEquals(7, result.deciders[0])
        assertEquals(6, result.deciders[1])
    }

    @Test
    fun flush() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(9)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(3)),
            Card(CardSuit.CLUBS, CardRank(4)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(6))
        )

        val result = rankHand(hand)

        assertEquals(Flush::class, result::class)
        assertEquals(9, result.deciders[0])
        assertEquals(7, result.deciders[1])
        assertEquals(7, result.deciders[2])
        assertEquals(6, result.deciders[3])
        assertEquals(6, result.deciders[4])
    }

    @Test
    fun straight() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(5)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.SPADES, CardRank(6)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(8)),
            Card(CardSuit.CLUBS, CardRank(10)),
            Card(CardSuit.CLUBS, CardRank(10))
        )

        val result = rankHand(hand)

        assertEquals(Straight::class, result::class)
        assertEquals(8, result.deciders[0])
    }

    @Test
    fun straightWithLowAce() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(14)),
            Card(CardSuit.CLUBS, CardRank(5)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(3)),
            Card(CardSuit.SPADES, CardRank(2)),
            Card(CardSuit.CLUBS, CardRank(2)),
            Card(CardSuit.CLUBS, CardRank(3))
        )

        val result = rankHand(hand)

        assertEquals(Straight::class, result::class)
        assertEquals(5, result.deciders[0])
    }

    @Test
    fun threeOfAKind() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(11)),
            Card(CardSuit.CLUBS, CardRank(7)),
            Card(CardSuit.SPADES, CardRank(3)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(ThreeOfAKind::class, result::class)
        assertEquals(7, result.deciders[0])
        assertEquals(11, result.deciders[1])
        assertEquals(6, result.deciders[2])
    }

    @Test
    fun twoPair() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(13)),
            Card(CardSuit.SPADES, CardRank(3)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(7)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(TwoPair::class, result::class)
        assertEquals(7, result.deciders[0])
        assertEquals(6, result.deciders[1])
        assertEquals(13, result.deciders[2])
    }

    @Test
    fun pair() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(13)),
            Card(CardSuit.SPADES, CardRank(3)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(14)),
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(Pair::class, result::class)
        assertEquals(6, result.deciders[0])
        assertEquals(14, result.deciders[1])
        assertEquals(13, result.deciders[2])
        assertEquals(7, result.deciders[3])
    }

    @Test
    fun highCard() {
        val hand = listOf(
            Card(CardSuit.CLUBS, CardRank(6)),
            Card(CardSuit.CLUBS, CardRank(13)),
            Card(CardSuit.SPADES, CardRank(2)),
            Card(CardSuit.SPADES, CardRank(4)),
            Card(CardSuit.SPADES, CardRank(14)),
            Card(CardSuit.CLUBS, CardRank(5)),
            Card(CardSuit.CLUBS, CardRank(7))
        )

        val result = rankHand(hand)

        assertEquals(HighCard::class, result::class)
        assertEquals(14, result.deciders[0])
        assertEquals(13, result.deciders[1])
        assertEquals(7, result.deciders[2])
        assertEquals(6, result.deciders[3])
    }
}
